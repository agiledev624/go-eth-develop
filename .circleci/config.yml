version: 2.1
orbs:
  gcp-gke: circleci/gcp-gke@1.3.0
  slack: circleci/slack@4.5.1
slack-nightly-build-fail-post-step: &slack-nightly-build-fail-post-step
  post-steps:
    - slack/notify:
        channel: $SLACK_DEFAULT_CHANNEL
        event: fail
        template: basic_fail-1

executors:
  go-builder:
    docker:
      - image: ethereumoptimism/go-builder:latest

commands:
  build-dockerfile:
    parameters:
      image-name:
        description: Image name
        type: string
      target:
        description: Dockerfile target
        type: string
        default: ""
      dockerfile:
        description: Dockerfile to use
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build
          command: |
            echo -n "$STACKMAN_REPO_AUTH" | docker login -u _json_key --password-stdin https://us-east4-docker.pkg.dev
            docker build -t "$STACKMAN_REPO/<<parameters.image-name>>:nightly" -f <<parameters.dockerfile>> <<#parameters.target>>--target <<parameters.target>><</parameters.target>> .
            docker push "$STACKMAN_REPO/<<parameters.image-name>>:nightly"

  go-lint-test:
    parameters:
      working_directory:
        description: Working directory
        type: string
    steps:
      - checkout
      - run:
          name: Lint
          command: golangci-lint run -E goimports -E sqlclosecheck -E bodyclose -E asciicheck ./...
          working_directory: <<parameters.working_directory>>
      - run:
          name: Test
          command: |
            mkdir -p /test-results
            gotestsum --junitfile /test-results/tests.xml
          working_directory: <<parameters.working_directory>>
      - store_test_results:
          path: /test-results

jobs:
  build-dtl:
    docker:
      - image: cimg/base:2021.04
    steps:
      - build-dockerfile:
          image-name: data-transport-layer
          target: data-transport-layer
          dockerfile: ./ops/docker/Dockerfile.packages
  build-go-batch-submitter:
    docker:
      - image: cimg/base:2021.04
    steps:
      - build-dockerfile:
          image-name: go-batch-submitter
          dockerfile: ./ops/docker/Dockerfile.batch-submitter-service
  build-deployer:
    docker:
      - image: cimg/base:2021.04
    steps:
      - build-dockerfile:
          image-name: deployer
          target: deployer
          dockerfile: ./ops/docker/Dockerfile.packages
  build-l2geth:
    docker:
      - image: cimg/base:2021.04
    steps:
      - build-dockerfile:
          image-name: l2geth
          dockerfile: ./ops/docker/Dockerfile.geth
  build-gas-oracle:
    docker:
      - image: cimg/base:2021.04
    steps:
      - build-dockerfile:
          image-name: gas-oracle
          dockerfile: ./ops/docker/Dockerfile.gas-oracle
  build-integration-tests:
    docker:
      - image: cimg/base:2021.04
    steps:
      - build-dockerfile:
          image-name: integration-tests
          target: integration-tests
          dockerfile: ./ops/docker/Dockerfile.packages
  build-proxyd:
    docker:
      - image: cimg/base:2021.04
    steps:
      - build-dockerfile:
          image-name: proxyd
          dockerfile: ./go/proxyd/Dockerfile
  deploy-nightly:
    docker:
      - image: cimg/base:2021.04
    steps:
      - gcp-gke/install
      - gcp-gke/update-kubeconfig-with-credentials:
          cluster: $STACKMAN_CLUSTER
          gcloud-service-key: STACKMAN_SERVICE_KEY
          google-compute-region: STACKMAN_COMPUTE_REGION
          google-compute-zone: STACKMAN_COMPUTE_ZONE
          google-project-id: STACKMAN_PROJECT_ID
          install-kubectl: yes
          perform-login: yes
      - run:
          name: Deploy
          command: |
            echo "Current nightly pods:"
            kubectl get pods --namespace nightly
            echo "Redeploying pods:"
            kubectl rollout restart statefulset nightly-sequencer --namespace nightly
            kubectl rollout restart statefulset nightly-go-batch-submitter --namespace nightly
            kubectl rollout restart statefulset nightly-dtl --namespace nightly
            kubectl rollout restart deployment nightly-gas-oracle --namespace nightly
            kubectl rollout restart deployment edge-proxyd --namespace nightly
  run-itests-nightly:
    docker:
      - image: cimg/base:2021.04
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Run integration tests
          command: |
            docker run \
              --env PRIVATE_KEY=$NIGHTLY_ITESTS_PRIVKEY \
              --env L1_URL=https://nightly-l1.optimism-stacks.net \
              --env L2_URL=https://nightly-l2.optimism-stacks.net \
              --env ADDRESS_MANAGER=0xfcA6De8Db94C4d99bD5a7f5De1bb7A039265Ac42 \
              --env L2_CHAINID=69 \
              --env MOCHA_BAIL=true \
              --env MOCHA_TIMEOUT=300000 \
              --env L1_GAS_PRICE=onchain \
              --env L2_GAS_PRICE=onchain \
              --env RUN_DEBUG_TRACE_TESTS=false \
              --env RUN_REPLICA_TESTS=false \
              --env RUN_HEALTHCHECK_TESTS=false \
              --env RUN_STRESS_TESTS=false \
              --env OVMCONTEXT_SPEC_NUM_TXS=1 \
              --env DTL_ENQUEUE_CONFIRMATIONS=12 \
              "$STACKMAN_REPO/integration-tests:nightly" \
              yarn test:integration:live
  notify:
    docker:
      - image: cimg/base:2021.04
    steps:
      - run:
          name: Success
          command: |
            echo "Dummy job."

  go-lint-test:
    parameters:
      working_directory:
        description: Working directory
        type: string
    docker:
      - image: ethereumoptimism/go-builder:latest
      - image: cimg/postgres:14.1
    steps:
      - go-lint-test:
          working_directory: <<parameters.working_directory>>

  go-lint-test-build:
    parameters:
      binary_name:
        description: Binary name to build
        type: string
      working_directory:
        description: Working directory
        type: string
    docker:
      - image: ethereumoptimism/go-builder:latest
      - image: cimg/postgres:14.1
    steps:
      - go-lint-test:
          working_directory: <<parameters.working_directory>>
      - run:
          name: Build
          command: make <<parameters.binary_name>>
          working_directory: <<parameters.working_directory>>

  yarn-monorepo:
    docker:
      - image: ethereumoptimism/js-builder:latest
    steps:
      - restore_cache:
          keys:
            - v1-source-{{ .Branch }}-{{ .Revision }}
            - v1-source-{{ .Branch }}
      - checkout
      - save_cache:
          key: v1-source-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - restore_cache:
          keys:
            - v1-yarn-install-{{ checksum "yarn.lock" }}
            - v1-yarn-install
      - run:
          name: Install dependencies
          command: yarn --frozen-lockfile
      - save_cache:
          key: v1-yarn-install-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
            - packages/common-ts/node_modules
            - packages/contracts/node_modules
            - packages/core-utils/node_modules
            - packages/data-transport-layer/node_modules
            - packages/message-relayer/node_modules
            - packages/replica-healthcheck/node_modules
            - packages/sdk/node_modules
            - integration-tests/node_modules
      - run:
          name: Build monorepo
          command: yarn build
      - save_cache:
          key: v1-yarn-build-{{ .Revision }}
          paths:
            - "."

  contracts-slither:
    docker:
      - image: ethereumoptimism/js-builder:latest
    steps:
      - restore_cache:
          keys:
            - v1-yarn-build-{{ .Revision }}
      - checkout
      - run:
          name: Run Slither
          command: yarn test:slither
          working_directory: packages/contracts

  contracts-tests:
    docker:
      - image: ethereumoptimism/js-builder:latest
    resource_class: xlarge
    steps:
      - restore_cache:
          keys:
            - v1-yarn-build-{{ .Revision }}
      - checkout
      - run:
          name: Lint
          command: yarn lint:check
          working_directory: packages/contracts
      - run:
          name: Slither
          command: yarn test:slither
          working_directory: packages/contracts
      - run:
          name: Test
          command: yarn test:coverage
          working_directory: packages/contracts

  dtl-tests:
    docker:
      - image: ethereumoptimism/js-builder:latest
    steps:
      - restore_cache:
          keys:
            - v1-yarn-build-{{ .Revision }}
      - checkout
      - run:
          name: Test
          command: yarn test:coverage
          working_directory: packages/data-transport-layer

  geth-tests:
    docker:
      - image: ethereumoptimism/go-builder:latest
    steps:
      - checkout
      - run:
          name: Test
          command: make test
          working_directory: l2geth

  depcheck:
    docker:
      - image: ethereumoptimism/js-builder:latest
    steps:
      - restore_cache:
          keys:
            - v1-yarn-build-{{ .Revision }}
      - checkout
      # Note: The below needs to be manually configured whenever we
      # add a new package to CI.
      - run:
          name: Check contracts
          command: npx depcheck
          working_directory: packages/contracts
      - run:
          name: Check core-utils
          command: npx depcheck
          working_directory: packages/core-utils
      - run:
          name: Check data-transport-layer
          command: npx depcheck
          working_directory: packages/data-transport-layer
      - run:
          name: Check sdk
          command: npx depcheck
          working_directory: packages/sdk
      - run:
          name: Check integration-tests
          command: npx depcheck
          working_directory: integration-tests

  bss-core-tests:
    docker:
      - image: ethereumoptimism/go-builder:latest
    steps:
      - checkout
      - run:
          name: Lint
          command: golangci-lint run -E goimports -E sqlclosecheck -E bodyclose -E asciicheck ./...
          working_directory: go/bss-core
      - run:
          name: Test
          command: |
            mkdir -p /test-results
            gotestsum --junitfile /test-results/tests.xml
          working_directory: go/bss-core
      - store_test_results:
          path: /test-results

  integration-tests:
    machine:
      image: ubuntu-2004:202111-02
      docker_layer_caching: true
    environment:
      DOCKER_BUILDKIT: 1
    parallelism: 3
    steps:
      - checkout
      - run:
          name: Bring up the stack
          command: |
            docker-compose build --progress=plain
            docker-compose up -d --scale replica_healthcheck=1
          working_directory: ops
      - run:
          name: Wait for sequencer
          command: bash scripts/wait-for-sequencer.sh
          working_directory: ops
      - run:
          name: Run integration tests
          command: |
            circleci tests glob "../integration-tests/test/*.spec.ts" | circleci tests split | tee splits.txt
            docker-compose run integration_tests $(cat splits.txt)
          working_directory: ops

  js-lint-test:
    parameters:
      package_name:
        description: Package name
        type: string
    docker:
      - image: ethereumoptimism/js-builder:latest
    steps:
      - restore_cache:
          keys:
            - v1-yarn-build-{{ .Revision }}
      - checkout
      - run:
          name: Lint
          command: yarn lint:check
          working_directory: packages/<<parameters.package_name>>
      - run:
          name: Test
          command: yarn test:coverage
          working_directory: packages/<<parameters.package_name>>


workflows:
  main:
    jobs:
      - yarn-monorepo
      - go-lint-test-build:
          name: batch-submitter-tests
          binary_name: batch-submitter
          working_directory: go/batch-submitter
      - go-lint-test-build:
          name: proxyd-tests
          binary_name: proxyd
          working_directory: go/proxyd
      - go-lint-test-build:
          name: teleportr-tests
          binary_name: teleportr
          working_directory: go/teleportr
      - go-lint-test-build:
          name: gas-oracle-tests
          binary_name: gas-oracle
          working_directory: go/gas-oracle
      - go-lint-test-build:
          name: indexer-tests
          binary_name: indexer
          working_directory: go/indexer
      - go-lint-test:
          name: bss-core-tests
          working_directory: go/bss-core
      - contracts-tests:
          requires:
            - yarn-monorepo
      - js-lint-test:
          name: dtl-tests
          package_name: data-transport-layer
          requires:
            - yarn-monorepo
      - js-lint-test:
          name: core-utils-tests
          package_name: core-utils
          requires:
            - yarn-monorepo
      - js-lint-test:
          name: sdk-tests
          package_name: sdk
          requires:
            - yarn-monorepo
      - js-lint-test:
          name: message-relayer-tests
          package_name: message-relayer
          requires:
            - yarn-monorepo
      - js-lint-test:
          name: replica-healthcheck-tests
          package_name: replica-healthcheck
          requires:
            - yarn-monorepo
      - depcheck:
          requires:
            - yarn-monorepo
      - geth-tests
      - integration-tests


  nightly-itests:
    triggers:
      - schedule:
          cron: "0 1 * * * "
          filters:
            branches:
              only:
                - develop
    jobs:
      - run-itests-nightly:
          context:
            - optimism
          post-steps:
            - slack/notify:
                channel: $SLACK_DEFAULT_CHANNEL
                event: fail
                custom: |
                  {
                    "text": "",
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "🔴 Nightly integration tests failed!"
                        }
                      },
                      {
                        "type": "actions",
                        "elements": [
                          {
                            "type": "button",
                            "text": {
                              "type": "plain_text",
                              "text": "View Job"
                            },
                            "url": "${CIRCLE_BUILD_URL}"
                          }
                        ]
                      }
                    ]
                  }
            - slack/notify:
                channel: $SLACK_DEFAULT_CHANNEL
                event: pass
                custom: |
                  {
                    "text": "",
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "✅ Nightly integration tests passed."
                        }
                      },
                      {
                        "type": "actions",
                        "elements": [
                          {
                            "type": "button",
                            "text": {
                              "type": "plain_text",
                              "text": "View Job"
                            },
                            "url": "${CIRCLE_BUILD_URL}"
                          }
                        ]
                      }
                    ]
                  }

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * * "
          filters:
            branches:
              only:
                - develop
    jobs:
      - build-dtl:
          context:
            - optimism
            - slack
          <<: *slack-nightly-build-fail-post-step
      - build-deployer:
          context:
            - optimism
            - slack
          <<: *slack-nightly-build-fail-post-step
      - build-l2geth:
          context:
            - optimism
            - slack
          <<: *slack-nightly-build-fail-post-step
      - build-gas-oracle:
          context:
            - optimism
            - slack
          <<: *slack-nightly-build-fail-post-step
      - build-integration-tests:
          context:
            - optimism
            - slack
          <<: *slack-nightly-build-fail-post-step
      - build-go-batch-submitter:
          context:
            - optimism
            - slack
          <<: *slack-nightly-build-fail-post-step
      - build-proxyd:
          context:
            - optimism
            - slack
          <<: *slack-nightly-build-fail-post-step
      - deploy-nightly:
          context:
            - optimism
            - slack
          <<: *slack-nightly-build-fail-post-step
          requires:
            - build-dtl
            - build-go-batch-submitter
            - build-deployer
            - build-l2geth
            - build-gas-oracle
            - build-integration-tests
            - build-proxyd
      - notify:
          context: slack
          requires:
            - deploy-nightly
          post-steps:
            - slack/notify:
                custom: |
                  {
                    "text": "",
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "✅ Nightly successfully deployed."
                        }
                      },
                      {
                        "type": "actions",
                        "elements": [
                          {
                            "type": "button",
                            "text": {
                              "type": "plain_text",
                              "text": "View Job"
                            },
                            "url": "${CIRCLE_BUILD_URL}"
                          }
                        ]
                      }
                    ]
                  }
                event: always
